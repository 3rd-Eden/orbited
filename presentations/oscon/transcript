                Slide: Orbited (Michael Carter and Jacob Rus)

M: Hi, my name is Michael Carter. I'm the founder of the Orbited project which I've been working on for two years. Orbited is an MIT licensed Comet server built for scalability and integration.

J: And I'm Jacob Rus. I've been working with Michael on Orbited for about a year and a half.  And I'm going to tell you about some exciting recent developments in Orbited that might change your lives forever.

M: So, to start us off I'd like to ask a question. How many of you in this room have developed an application that uses Comet -- Any application, even if its not in production.

    (hands raise)

                Slide: many responses to a single request

M: Ok, so this talk should help those of you with your hands up as well as your hands down. Just to make sure we're all on the same page, how about a definition? Comet is (TODO)

J: Wait a second, Michael.  That sounds an awful lot like a socket. 

M: A Tcp socket?

                Slide: TCP

J: yeah, TCP -- Full-duplex, Bi-directional communication between the client and server...

J: How many of you have used TCP sockets in your applications? raise your hands

    (hands raise)

J: All network programming for decades has been written on top of the same straight-forward abstraction.  We have a bi-directional communication channel, where each end has a write function for sending data, and a way to attach callbacks for reading data written at the other end.

M: Well no, it's not a socket.

                Slide: Flash sockets and Java sockets with an X through them

J: How's that?

M: Sockets don't work on the web. We've had sockets in Flash and Java for a long time, but there is a show-stopping problem. That is, they don't interoperate over routers and firewalls. You can't deploy an application that will fail on at any school, government, or coroporate office. 

J: Ok then.  If it's not a socket, what *is* the architecture of Comet?

                Slide: typical web framework

M: So we already know about a typical web application deployment. You have your web framework and you construct Rich internet applications using AJAX for the upstream. When I say upstream, I mean when the browser sends asynchronous notification to the server. Downstream, on the other hand, is asynchronous notification from the browser to the server. 

                Slide: web framework + comet server

M: In order to do downstream, we add a Comet server beside the web applciation. Downstream data flows from the the  web application, to the comet server, and then to the browser.

J: But what does the javascript API look like?

                Slide: JS API

M: Well, for upstream its just XHR, and for downstream its Comet.receive(cb), where the cb is a function that takes data. Other comet servers have variations on this API, but its basically the same.

J: So you have a way to send, and a way to read data?

M: right.

                Slide: TCPSocket API

J: That sounds like a socket. why not just make the api a TCPSocket then. It has a connect function, a send function, and an onread callback.

M: So, Remember that red thing in your salad earlier today, the Tomato.  The one that you insisted was a to mah toe? Thats what this is about -- word games. Ok then, call it a TCPSocket, it doesn't change what it is.

J: Well, how would you make a web-based IRC client with Comet?

M: So you admit you're playing word games?

J: No, I'm building an argument. Bear with me -- how would you create a web-based IRC client with Comet

                Slide: of IRC bridge

M: Well, we have a way to do bi-directional communication from and to the web app, so now we built a bridge to IRC. The web app opens an IRC connection for each user. If a user wants to send a private message, the browser makes an ajax request to the app with the content of the message. The app makes a call to the irc client to send the message. When a user receives a message, the application turns it into a json data structure representing the message and has the comet server dispatch it to the appropriate browser.

J: Is the browser actually getting all the information that a Desktop client would get?

M: Of course. All we're doing is encoding those frames in json, but we still send all of the data. The IRC web client can do just as much as a desktop client.

J: Ok, so what about a Jabber client in the browser?

                Slide: of Jabber bridge

M: Same deal. We create a jabber connection on the web app for each user connected. When we receive frames, we send a representation of them to the browser via the comet server.

                Slide: Ajaxian "[they] now like to call..."

J: So this is my point. I say, lets call this TCPSocket, and many people say, oh, word games. Now you like to call Comet TCPSocket. Like this ajaxian article for instance.

J: But really, its about integration. You are proposing that we write a server-side bridge for each back-end system we want to integrate with. But with that method, our life is ahead of us because what we're *really* doing is writing a new json based protocol for each existing protocol, and then writing a server-side trans-coder.

M: Slow down there. We aren't creating any new protocols, just bridge the protocols to the browser.

J: No, actually you are. You aren't actually sending RAW irc to the browser, you're sending JSON encoded IRC. So you need a new transcoder for every protocol.

M: Thats not a big deal though. We could write a transcoder for the more popular protocols, and then write a tutorial on how to write your own for any protocol we don't support.

[Slide a bunch of protocols]
J: Its a waste a time. Tell me, what do these protocols all have in common?

M: They're all protocols, on the internet

J: Yeah....

M: They're full duplex, They're for real-time communication, they're all built on TCP...

[Slide: TCPSocket bridge ]
J: Exactly. They are TCP protocols. So thats my argument. Lets write a SINGLE bridge that takes raw TCP data and transcodes it to ajax/comet.

M: What does that even mean?

J: Remember that TCPSocket api I told you about?

M: yeah?

J: So lets say you have this code:
[Slide: tcpsocket connect]
conn = new TCPSocket("domain", port) 

J: Now when you create a TCPSocket, it actually causes the Orbited server to create a tcp socket to the destination port and domain

J: So when you call conn.send("data"), it takes that payload "data" and makes a POST to Orbited with that payload. 

J: Next, Orbited, takes that data, and writes it to the TCP socket. It doesnt care what the protocol is whatsoever, it just proxies any bytes that it receives.

J: So when the back-end server sends some data downward, Orbited will locate the appropriate live Comet connection and send that data to the browser. The browser receives it and calls the TCPSocket's onread function.

J: So in essence, this TCPSocket api isn't just a way to communicate between the browser and the comet server. Its like the comet server doesn't exist -- its just a dumb proxy. Really, its a way to communicate between the browser and an *arbitrary* back-end TCP server.

J: We aren't calling comet Sockets. We're putting sockets in the browser. And the best part is, because we're implementing sockets ON TOP of comet, it still traverses proxies and firewalls seamlessly, and works in any browser.

M: So in the case of the irc client you'd be getting *raw* irc data in the browser?

J: yes.

M: what good is that?

J: So you write an IRC client in the browser. In javascript. You parse the IRC protocol. Just like you would do for any other language

M: Yeah, but now you have to do more work in the browser. You'll be using extra cpu to parse IRC instead of just eval or safe evaling some json.

J: So what percentage of the processor would you say the browser uses doing this complicated processing?

M: 10%
[slide 10% of the processor to parse the protocol in JS ]

J: Sure. So, how much faster is C than javascript for parsing protocols

M: Whats that have to do with anything?

J: For making an accurate comparison between doing the processing on the server in the fastest language possible versus on the client in javascript

M: 50x
[slide 10% processor; c is 50x faster than js]

J: Ok, so for one user it takes 10% of the processor. But c is 50 times faster, so divide that by 50. Therefore, it would only take 0.2% of the processor for the server to parse that protocol for the browser, right?

M: Right, which is why I recommended that we do it that way.

[The math... = 500 users MAX]
J: But hold on -- That means that we would saturate the server with 500 users. So if you want any chance of scaling this stuff, you better not put it on the server!
[Slide: 500 vs. 100k]

M: I see what you did there! Okay, so maybe I exagerated. It would take probably 1% of the processor to parse the js protocol


J: Okay, then whats the problem? If the user's browser is only using 1% of the cpu, that isn't a problem for them at all -- Its pratically nothing. 

J: The bottom line is this: The server is *always* the bottleneck for any webapp. If there is some piece of the computing that you can do in the browser, then *do it in the browser*. Parsing the protocols can clearly happen on the server or the browser. But If you parse the protocol on the server, scalability will be a big problem. Therefore, distributing this work load to the clients allows massive scalability.

M: So you have packets in, and then you have packets out. Its a dumb proxy.

J: Almost. We have one more component in Orbited which is an access control list. We only proxy connections to pre-configured destinations. The best way to describe orbited is as a web enabled Firewall.

[slide: orbited firewall]

M: Thats interesting. So here's my question. I have a reasonable understanding how Gmail works -- its like a classic Comet deployment.

M: For the chat, they have a web application that maintains a connection to the xMPP server for each applicaiton. When new XMPP data arrives, the Comet component is used to dispatch the message to the user. How would Gmail chat work with the Web firewall notion of comet?

J: So you would have no such web application for the bridging. You would deploy an out-of-the-box XMPP server, and put the orbited firewall in front of it. 

J: Then the browser would open a tcp connection to the XMPP server via orbited. The browser would parse incoming XMPP data and make the appropriate callbacks that an XMPP client should have, 
[slide: xmpp api]

J: such as onPresence, or onInstantMessage.

M: That makes sense. But I don't see how you would integrate the chat with the web mail.

J: So the webmail is the most interesting part of the whole process.

[slide: IMAP server, orbited, browser]
J: Lets say we ran an IMAP server, like so. When the static html page loaded, we could prompt the user for the username and password, then call  IMAPClient.connect() and authenticate with those credentials. Once the connection was established, we would ask the IMAP client for the 50 most recent mail messages, including subject line, sender, date, and read status.

[slide, from imap client to imap gui]

J: Next, we just take that data and stick it in the GUI.

J: Lastly, we send an IMAP idle command to the imap server. this IDLE command tells the imap server "Remain idle until I execute another command. But if a new email arrives, let me know about it." That means we get instant browser notification of new mail that arrives, and for free! because the IMAP protocol supports it inherently.

M: You know, IMAP also supports search. You could implement Gmail's search feature by making an IMAP search request and getting back the subject lines and message ids of the emails that matched the search critera.

J: Yeah, exactly. Whats really neat here is that there was already a ton of work put into these protocols. the IMAP protocol supports every features you could ever want. Moving mail to a different folder. Deleting it. Tagging it. Whatever! We get it all for free, and with NO SERVER CODE whatsoever because its all already implemented by the IMAP server.

M: So that doesn't fully answer my question. We can have an XMPP client and an IMAP client on one page. But how do we connect them to the same user account. How then do you avoid server side code?

J: Remember what I said aboutn 

[DEMO: telnet/IRC] (local irc server as back up if freenode isn't up for us)


