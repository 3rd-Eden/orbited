# -*- python -*-
# ex: set syntax=python:
from ConfigParser import ConfigParser
import os
here = os.path.abspath('/home/buildbot/master')

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
credentials_path = os.path.join(here, '.credentials')
credentials = ConfigParser()
print credentials_path
credentials.read([credentials_path])

c['slaves'] = [BuildSlave("bs1", credentials.get('slaves', 'bs1')),
               BuildSlave("bs2", credentials.get('slaves', 'bs2'))]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9999

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler
c['schedulers'] = []
c['schedulers'].append(Scheduler(name="trunk (0.7.x)", branch=None,
                                 treeStableTimer=24*60,
                                 builderNames=["orbited 0.7 trunk"]))


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['bots'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

hgurl = 'http://bitbucket.org/desmaj/orbited/'

from buildbot.process import factory
from buildbot.steps.source import Mercurial
from buildbot.steps.shell import ShellCommand

f1 = factory.BuildFactory()
f1.addStep(Mercurial(baseURL=hgurl))
f1.addStep(ShellCommand(command=["bash", "/home/buildbot/local/bin/activate"]))
f1.addStep(ShellCommand(command=["nosetests"], workdir="build"))
f1.addStep(ShellCommand(command=["python", "setup.py", "sdist"], workdir="build/daemon"))

b1 = {'name': "orbited 0.7 trunk",
      'slavename': "bs1",
      'builddir': "trunk",
      'factory': f1,
      }

f2 = factory.BuildFactory()
f2.addStep(Mercurial(repourl=hgurl, defaultBranch='0.8', branchType='inrepo'))
f2.addStep(ShellCommand(command=["bash", "/home/buildbot/local/bin/activate"]))
f2.addStep(ShellCommand(command=["nosetests"], workdir="build"))
f2.addStep(ShellCommand(command=["python", "setup.py", "sdist", "upload"], workdir="build/daemon"))

b2 = {'name': "orbited 0.8",
      'slavename': "bs2",
      'builddir': "0.8",
      'factory': f2,
      }
c['builders'] = [b1, b2]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# Use allowForce=True (boolean, not a string. ie: not 'True') to allow
# Forcing Builds in the Web User Interface. The default is False.
# from buildbot.status import html
from buildbot.status import html
c['status'].append(html.WebStatus(http_port='tcp:8999:interface=127.0.0.1', 
                                  allowForce=True))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "orbited"
c['projectURL'] = "http://orbited.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://bacondispenser.org/buildbots/"
